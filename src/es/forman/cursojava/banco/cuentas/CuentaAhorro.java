package es.forman.cursojava.banco.cuentas;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CuentaAhorro.java
//  @ Date : 16/03/2006
//  @ Author : 
//
//


public class CuentaAhorro extends Cuenta {
	private CuentaCorriente cuentaAsociada;
	
	/**
	 * 
	 * @param cantidadInicial Cantidad de apertura de la cuenta de ahorro.
	 * @param cuentaAsociada No puede ser nula; si lo es, producirá una excepción.
	 */
	public CuentaAhorro(float cantidadInicial, CuentaCorriente cuentaAsociada, String numeroCuenta) {
		super(cantidadInicial, numeroCuenta);
		this.cuentaAsociada = cuentaAsociada;
	}
	
	public CuentaAhorro(CuentaCorriente cuentaAsociada, String numeroCuenta) {
		super(0.0f, numeroCuenta);
		this.cuentaAsociada = cuentaAsociada;
	}
	
	/**
	 * Método de conveniencia para devolver la cuenta de crédito asociada.
	 * @return
	 */
	private CuentaCredito getCuentaCreditoAsociada() {
		return this.cuentaAsociada.getCuentaCredito();
	}

	/**
	 * @return 0 si no es posible; 2 si es posible; 3 si es posible pero hay que sacar también
	 *  de la cuenta de crédito.
	 */
	public int reintegra(float cantidad, boolean ejecuta) {
		if (this.isDisponible(cantidad))	{ // En la cuenta asociada hay más dinero del que nos falta; la sacaremos de aquí.
			if (ejecuta)
				this.setSaldo(this.getSaldo()-cantidad);
			return 2;
		}
		else		// no hay dinero suficiente aquí: intentarlo con la cuenta de crédito
			if (this.cuentaAsociada.isCuentaCreditoDisponible())  {
				float faltante = cantidad - this.getDisponible() ;
				int resultado = this.getCuentaCreditoAsociada().reintegra(faltante, ejecuta);
				if (resultado != 0 && ejecuta)
					this.setSaldo(this.getSaldo() - cantidad + faltante);
				return resultado;
			}
			else return IFCuenta.REINTEGRO_NOK;
	}

	@Override
	public float getTipoInteres() {
		// TODO Auto-generated method stub
		return 0;
	}
}
