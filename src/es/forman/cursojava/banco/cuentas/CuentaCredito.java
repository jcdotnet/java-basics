package es.forman.cursojava.banco.cuentas;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : CuentaCredito.java
//  @ Date : 16/03/2006
//  @ Author : 
//
//
public class CuentaCredito extends Cuenta {
	/** Saldo inicial definido para las cuentas de crédito, a no ser que se defina lo contrario */
	public static final float CREDITO_INICIAL = 3000.0f;
	/** Comisión de disponibilidad */
	public static final float COMISION_DISPONIBILIDAD = 0.01f;
	/** Incremento estándar */
	public static final float INCREMENTO_EURIBOR_EST = 0.02f;
	
	private float incrementoEuribor;
	
	private CuentaCorriente cuentaAsociada;
	
	/**
	 * Constructor principal: crea una cuenta de crédito asociada a una principal, con un saldo
	 * específico.
	 * @param cantidadInicial Saldo inicial
	 * @param cuentaAsociada Cuenta asociada, normalmente una cuenta corriente.
	 */
	public CuentaCredito(float cantidadInicial, CuentaCorriente cuentaAsociada) {
		super(cantidadInicial, "CR" + cuentaAsociada.getNumero());
		this.cuentaAsociada = cuentaAsociada;
		// Ahora cobra una comisión de disponibilidad; si no es posible, deja la cuenta de crédito a 0 (realmente deberíamos elevar una excepción y abortar el proceso).
		if (this.cuentaAsociada.reintegra(cantidadInicial*this.getComisionDisponibilidad(), true) == 0)
			this.setSaldo(0.0f);
		this.setIncrementoEuribor(CuentaCredito.INCREMENTO_EURIBOR_EST);
	}
	
	/**
	 * Crea una cuenta de crédito asociada a una principal, con un CREDITO_INICIAL de 3000€.
	 * @param cuentaAsociada
	 */
	public CuentaCredito(CuentaCorriente cuentaAsociada) {
		this(CuentaCredito.CREDITO_INICIAL, cuentaAsociada);		// Llama al constructor principal.
	}
		
	private float getComisionDisponibilidad() {
		return CuentaCredito.COMISION_DISPONIBILIDAD;
	}
	
	/**
	 * @return Incremento sobre el EURIBOR, pactado con el cliente a la hora de abrir la cuenta de crédito.
	 */
	public float getIncrementoEuribor() {
		return this.incrementoEuribor;
	}
	
	/**
	 * Permite variar el incremento sobre el EURIBOR de forma explícita. De esta forma soportamos las revisiones
	 * del interés en negociaciones con el cliente.
	 * @param f Nuevo incremento (diferencial). Debe estar entre 0 y 1; si no, esta función no altera el incremento.
	 */
	public void setIncrementoEuribor(float f) {
		if (f<0.0f || f>1.0f)
			return;
		this.incrementoEuribor = f;
	}

	/**
	 * Un reintegro de la cuenta de crédito es posible si el disponible es superior a la cantidad reclamada más los intereses.
	 * @return 3 si es posible, 0 si no lo es.
	 */
	public int reintegra(float cantidad, boolean ejecuta) {
		if (this.isDisponible(this.getCantidadConIntereses(cantidad))) {
			if (ejecuta)
				this.setSaldo(this.getSaldo()-this.getCantidadConIntereses(cantidad));
			return 3;
		}
		else
			return 0;
	}
	
	private float getCantidadConIntereses(float cantidad) {
		return cantidad * (1+this.getTipoInteres());
	}

	/**
	 * @return El tipo de interés de la cuenta de crédito, que es la suma del EURIBOR más un incremento pactado
	 * con el cliente.
	 */
	public float getTipoInteres() {
		return Euribor.getValorActual() + this.getIncrementoEuribor();
	}
}
