//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Curso Java
//  @ File Name : CuentaCorriente.java
//  @ Date : 16/03/2006
//  @ Author : Jose Carlos Roman Rubio
//
//

package es.forman.cursojava.cajero;


public class CuentaCorriente extends Cuenta {
	
        public static final float SALDOMINIMO=100; 
        // podemos cambiar a var miembro y que el cliente decida con un setter
	public static final float SALDOMAXIMO=100000; // cambiar a MAX_FLOAT ;
        private int pin;
        private int numCuenta;
        private float saldoCC;       
        private float nivelMaximo= SALDOMAXIMO;
        
        
         public CuentaCorriente(Cliente cliente) {
          super(cliente);       
          this.pin=Cajero.numCuentas++;
        }
       
        
        public void setPin(int pin){
           this.pin=pin;
        }
        public int getPin() {
            return this.pin;    
        }
        public float consultaSaldo() {
           return this.saldoCC;
        }
       
        
        public void ingresaDinero(float cantidad, Cuenta cAhorro) {
               this.saldoCC+=cantidad;
               if (excesoSaldo())   
                   this.transferenciaAutomaticaAhorro(cAhorro);  
	}
	
	public boolean retiraDinero(float cantidad, Cuenta cAhorro,Cuenta credito) {
	     
             if (cantidad>this.saldoCC-SALDOMINIMO) {           
            
                 float cantidadTraspasar= SALDOMINIMO+(cantidad-this.saldoCC);
                 if (cAhorro.consultaSaldo()>cantidadTraspasar) {
                   this.saldoCC=SALDOMINIMO;
                   return cAhorro.retiraDinero(cantidadTraspasar,cAhorro,credito);
                 }
                 else if (credito!=null) {             
                       if (credito.retiraDinero(cantidadTraspasar,cAhorro,credito)) {
                               this.saldoCC=SALDOMINIMO;
                               return true;
                       }
                       else return false;
                 }
                 else            
                       return false;
             }
             else {
                     this.saldoCC-= cantidad;
                     return true;
             }
        }
        

        
        public boolean transferencia(Cuenta cAhorro, float cantidad) {
            if (this.saldoCC-cantidad<SALDOMINIMO)
                    return false;
            else if (cantidad<nivelMaximo) {
                    cAhorro.ingresaDinero(cantidad,cAhorro);
                    this.saldoCC-=cantidad; 
                    return true;
            }       
            else return false;
        }
   
        public void setNivelMaximo(float maximo, Cuenta cAhorro) {
           if (maximo<=SALDOMAXIMO)
                   this.nivelMaximo=maximo;
           if (excesoSaldo()) 
                   this.transferenciaAutomaticaAhorro(cAhorro);      
           
        }
         private boolean excesoSaldo () {
            return (this.saldoCC>this.nivelMaximo); 
        }
        
        private void transferenciaAutomaticaAhorro(Cuenta cAhorro) {
                 float diferencia= this.saldoCC-this.nivelMaximo;
                 this.saldoCC= this.nivelMaximo;
                 cAhorro.ingresaDinero(diferencia,cAhorro);
        }

}